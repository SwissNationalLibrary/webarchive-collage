#!/bin/bash
##
# e-Helvetica Access 2022 - Interactive Webarchive Collage
# This script creates the mosaic image of collage as
# a set of rows of pyramidal TIFF files.
#

# set base directory to start commands
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR/..

# get project environment variables and local overrides
export $(echo $(cat $DIR/../.env | sed 's/#.*//g'| xargs) | envsubst)
test -f $DIR/../.env.local && export $(echo $(cat $DIR/../.env.local | sed 's/#.*//g'| xargs) | envsubst)

# abort on errors
set -e
trap 'echo "\"${last_command}\" command filed with exit code $?."' EXIT

# each collage generation is identified by this timestamp
COLLAGE_TIMESTAMP=$(date +"%Y%m%d")
COLLAGE_ID=main
COLLAGE_NAME=${COLLAGE_ID}-${COLLAGE_TIMESTAMP}
LOCAL_COLLAGE_DIR=/data/collages/${COLLAGE_NAME}

# fetch current webarchives metadata from solr to webarchives.json
#./bin/fetch.sh --limit 1000000 --outfile ${LOCAL_COLLAGE_DIR}/meta/webarchives.json
./bin/build.sh --outfile /data/main.json --dir /screenshots --list /data/domains.txt

# create mosaic
# - /data/thumbnails is mounted directory to the webarchive screenshots
#   generated by the thumbnailing component
# - /data/collage-${COLLAGE_TIMESTAMP}/images will contain the pyramidal tiffs
#
./bin/montage.sh --id ${COLLAGE_ID} \
--dataFilename ${LOCAL_COLLAGE_DIR}/meta/webarchives.json \
--dataOutDir ${LOCAL_COLLAGE_DIR}/meta \
/data/thumbnails \
${LOCAL_COLLAGE_DIR}/images

# remove old collage directories on local system
#find ./data/public/collages/${COLLAGE_ID}* -type d -not -name ${COLLAGE_ID}-${COLLAGE_TIMESTAMP}  -print0 | xargs -0 -I {} rm -rf {}
find ./data/public/collages/${COLLAGE_ID}* -type d -not -name ${COLLAGE_ID}-${COLLAGE_TIMESTAMP}  -print0 | xargs -0 -I {} echo {}

# patch frontend collage config (locally)
./bin/patch.sh \
--path ${LOCAL_COLLAGE_DIR} \
--uri collages/${COLLAGE_NAME} \
--config /data/public/config.json \
--cacheBuster "-${COLLAGE_TIMESTAMP}"

# leave information which collages need syncing
# echo ${COLLAGE_TIMESTAMP} >> .sync

# sync images to prod system
#rsync -av -e ssh \
#192.168.99.99:${LOCAL_COLLAGE_DIR}/images/ \
#/data/cantaloupe/images/collages/${COLLAGE_NAME}/

# sync metadata to prod system
#rsync -av -e ssh  \
#192.168.99.99:${LOCAL_COLLAGE_DIR}/meta/ \
#/data/collages/${COLLAGE_NAME}

# sync config back to prod system
#rsync -av -e ssh 192.168.99.99:${LOCAL_COLLAGE_DIR}/tmp/config.json /data/public/config.json

# remove old collage image directories on prod system
#ssh 192.168.99.99 bash -c "cd /data/cantaloupe/images/ && find ./collage-* -not -name ${COLLAGE_ID}-${COLLAGE_TIMESTAMP}  -print0 | xargs -0 -I {} echo {}"

# remove old collage metadata directories on prod system
#ssh 192.168.99.99 bash -c "cd /data/cantaloupe/images/ && find ./collage-* -not -name ${COLLAGE_ID}-${COLLAGE_TIMESTAMP}  -print0 | xargs -0 -I {} echo {}"

# fix collage permissions
chmod -R g+rwxs ./data/collages/${COLLAGE_ID}-${COLLAGE_TIMESTAMP}

# link collage metadata for nginx
ln -s ../../collages/${COLLAGE_ID}-${COLLAGE_TIMESTAMP} ./data/public/collages/${COLLAGE_ID}-${COLLAGE_TIMESTAMP}

# link collage images for cantaloupe
ln -s ../../../collages/${COLLAGE_ID}-${COLLAGE_TIMESTAMP}/images ./data/cantaloupe/images/collages/${COLLAGE_ID}-${COLLAGE_TIMESTAMP}

# move old collage directories to archive directory
#find ./data/collages/${COLLAGE_ID}* -not -name ${COLLAGE_ID}-${COLLAGE_TIMESTAMP}  -print0 | xargs -0 -I {} echo {}
#find ./data/collages/${COLLAGE_ID}* -not -name ${COLLAGE_ID}-${COLLAGE_TIMESTAMP}  -print0 | xargs -0 -I {} mv {} ./data/_archive
find ./data/collages/main* -maxdepth 0 -type d -not -name ${COLLAGE_ID}-${COLLAGE_TIMESTAMP}  -print0 | xargs -0 -I {} mv {} ./data/_archive

# clean-up archive directory
#find ./data/_archive -maxdepth 1 -mtime +120 -type d -print0 | xargs -0 -I {} echo {}
find ./data/_archive -maxdepth 1 -mtime +14 -type d -print0 | xargs -0 -I {} rm -rf {}
